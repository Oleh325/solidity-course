{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\nerror CallFailed();\nerror NotEnoughSent();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 constant public MINIMUM_USD = 5 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public immutable i_priceFeed;\n\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        if(msg.value.getConversionRate(i_priceFeed) <= MINIMUM_USD) revert NotEnoughSent();\n        if(addressToAmountFunded[msg.sender] == 0) {\n            funders.push(msg.sender);\n            addressToAmountFunded[msg.sender] = msg.value;\n        }\n        else {\n            addressToAmountFunded[msg.sender] += msg.value;\n        }\n    }\n\n    function withdraw() public onlyOwner {\n        for(uint256 funderIdx = 0; funderIdx < funders.length; funderIdx++) {\n            addressToAmountFunded[funders[funderIdx]] = 0;\n        }\n        funders = new address[](0);\n\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        if(!callSuccess) revert CallFailed();\n    }\n\n    modifier onlyOwner {\n        if(msg.sender != i_owner) revert NotOwner();\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(uint256 amountETH, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 priceETH = getPrice(priceFeed);\n        uint256 amountETHinUSD = (priceETH * amountETH) / 1e18;\n        return amountETHinUSD;\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}