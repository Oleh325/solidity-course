/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlySimulatedBackend",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTimeLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "playerAddress",
        type: "address",
      },
    ],
    name: "hasAlreadyEntered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b5060405162001b2138038062001b21833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161174b620003d66000396000818161095c015281816109e70152610a250152600061082501526000610802015260006107e1015260006107a50152600081816103be01526104bb0152600081816103fb015261044f015261174b6000f3fe6080604052600436106100f35760003560e01c80635f1b0fd81161008a578063c7e284b811610059578063c7e284b8146102fc578063e55ae4e814610327578063f43b52cb14610364578063fd6673f51461038f576100f3565b80635f1b0fd81461023d5780636e04ff0d14610268578063884bf67c146102a657806391ad27b4146102d1576100f3565b806344fa2cce116100c657806344fa2cce146101815780634585e33b146101be578063473f1ddc146101e757806353a2c19a14610212576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632cfcc53914610177575b600080fd5b34801561010457600080fd5b5061010d6103ba565b60405161011a9190610daf565b60405180910390f35b34801561012f57600080fd5b506101386103e2565b6040516101459190610e41565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610ff5565b6103f9565b005b61017f6104b9565b005b34801561018d57600080fd5b506101a860048036038101906101a391906110af565b61063d565b6040516101b591906110f7565b60405180910390f35b3480156101ca57600080fd5b506101e560048036038101906101e0919061116d565b6106ee565b005b3480156101f357600080fd5b506101fc6108de565b60405161020991906111c9565b60405180910390f35b34801561021e57600080fd5b50610227610908565b6040516102349190611203565b60405180910390f35b34801561024957600080fd5b50610252610911565b60405161025f919061123b565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a919061130b565b61091a565b60405161029d9291906113d3565b60405180910390f35b3480156102b257600080fd5b506102bb6109db565b6040516102c89190610daf565b60405180910390f35b3480156102dd57600080fd5b506102e66109e3565b6040516102f39190610daf565b60405180910390f35b34801561030857600080fd5b50610311610a0b565b60405161031e9190610daf565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611403565b610a61565b60405161035b91906111c9565b60405180910390f35b34801561037057600080fd5b50610379610aa8565b6040516103869190610daf565b60405180910390f35b34801561039b57600080fd5b506103a4610ab2565b6040516103b19190610daf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ab57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104a2929190611430565b60405180910390fd5b6104b58282610abe565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610513576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052757610526610dca565b5b600160149054906101000a900460ff16600181111561054957610548610dca565b5b14610580576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600080549050036105f857426002819055505b3373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600080600080549050905060005b818110156106e2578373ffffffffffffffffffffffffffffffffffffffff166000828154811061067e5761067d611459565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106cf576001925050506106e9565b80806106da906114b7565b91505061064b565b5060009150505b919050565b60006107086040518060200160405280600081525061091a565b509050806107775747600080549050600160149054906101000a900460ff16600181111561073957610738610dca565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161076e939291906114ff565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561079c5761079b610dca565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610866959493929190611572565b6020604051808303816000875af1158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a991906115da565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60006003905090565b60006060600080600181111561093357610932610dca565b5b600160149054906101000a900460ff16600181111561095557610954610dca565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426109899190611607565b119050600080600080549050119050600080471190508380156109a95750825b80156109b25750815b80156109bb5750805b955085604051806020016040528060008152509550955050505050915091565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008054905003610a225760009050610a5e565b427f0000000000000000000000000000000000000000000000000000000000000000600254610a51919061163b565b610a5b9190611607565b90505b90565b6000808281548110610a7657610a75611459565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610ad957610ad8611459565b5b6020026020010151610aeb919061169e565b90506000808281548110610b0257610b01611459565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b9657610b95610dca565b5b0217905550600067ffffffffffffffff811115610bb657610bb5610eb2565b5b604051908082528060200260200182016040528015610be45781602001602082028036833780820191505090505b5060009080519060200190610bfa929190610cef565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c2890611700565b60006040518083038185875af1925050503d8060008114610c65576040519150601f19603f3d011682016040523d82523d6000602084013e610c6a565b606091505b5050905080610ca5576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d68579160200282015b82811115610d675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d0f565b5b509050610d759190610d79565b5090565b5b80821115610d92576000816000905550600101610d7a565b5090565b6000819050919050565b610da981610d96565b82525050565b6000602082019050610dc46000830184610da0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e0a57610e09610dca565b5b50565b6000819050610e1b82610df9565b919050565b6000610e2b82610e0d565b9050919050565b610e3b81610e20565b82525050565b6000602082019050610e566000830184610e32565b92915050565b6000604051905090565b600080fd5b600080fd5b610e7981610d96565b8114610e8457600080fd5b50565b600081359050610e9681610e70565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eea82610ea1565b810181811067ffffffffffffffff82111715610f0957610f08610eb2565b5b80604052505050565b6000610f1c610e5c565b9050610f288282610ee1565b919050565b600067ffffffffffffffff821115610f4857610f47610eb2565b5b602082029050602081019050919050565b600080fd5b6000610f71610f6c84610f2d565b610f12565b90508083825260208201905060208402830185811115610f9457610f93610f59565b5b835b81811015610fbd5780610fa98882610e87565b845260208401935050602081019050610f96565b5050509392505050565b600082601f830112610fdc57610fdb610e9c565b5b8135610fec848260208601610f5e565b91505092915050565b6000806040838503121561100c5761100b610e66565b5b600061101a85828601610e87565b925050602083013567ffffffffffffffff81111561103b5761103a610e6b565b5b61104785828601610fc7565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107c82611051565b9050919050565b61108c81611071565b811461109757600080fd5b50565b6000813590506110a981611083565b92915050565b6000602082840312156110c5576110c4610e66565b5b60006110d38482850161109a565b91505092915050565b60008115159050919050565b6110f1816110dc565b82525050565b600060208201905061110c60008301846110e8565b92915050565b600080fd5b60008083601f84011261112d5761112c610e9c565b5b8235905067ffffffffffffffff81111561114a57611149611112565b5b60208301915083600182028301111561116657611165610f59565b5b9250929050565b6000806020838503121561118457611183610e66565b5b600083013567ffffffffffffffff8111156111a2576111a1610e6b565b5b6111ae85828601611117565b92509250509250929050565b6111c381611071565b82525050565b60006020820190506111de60008301846111ba565b92915050565b600063ffffffff82169050919050565b6111fd816111e4565b82525050565b600060208201905061121860008301846111f4565b92915050565b600061ffff82169050919050565b6112358161121e565b82525050565b6000602082019050611250600083018461122c565b92915050565b600080fd5b600067ffffffffffffffff82111561127657611275610eb2565b5b61127f82610ea1565b9050602081019050919050565b82818337600083830152505050565b60006112ae6112a98461125b565b610f12565b9050828152602081018484840111156112ca576112c9611256565b5b6112d584828561128c565b509392505050565b600082601f8301126112f2576112f1610e9c565b5b813561130284826020860161129b565b91505092915050565b60006020828403121561132157611320610e66565b5b600082013567ffffffffffffffff81111561133f5761133e610e6b565b5b61134b848285016112dd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561138e578082015181840152602081019050611373565b60008484015250505050565b60006113a582611354565b6113af818561135f565b93506113bf818560208601611370565b6113c881610ea1565b840191505092915050565b60006040820190506113e860008301856110e8565b81810360208301526113fa818461139a565b90509392505050565b60006020828403121561141957611418610e66565b5b600061142784828501610e87565b91505092915050565b600060408201905061144560008301856111ba565b61145260208301846111ba565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114c282610d96565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114f4576114f3611488565b5b600182019050919050565b60006060820190506115146000830186610da0565b6115216020830185610da0565b61152e6040830184610da0565b949350505050565b6000819050919050565b61154981611536565b82525050565b600067ffffffffffffffff82169050919050565b61156c8161154f565b82525050565b600060a0820190506115876000830188611540565b6115946020830187611563565b6115a1604083018661122c565b6115ae60608301856111f4565b6115bb60808301846111f4565b9695505050505050565b6000815190506115d481610e70565b92915050565b6000602082840312156115f0576115ef610e66565b5b60006115fe848285016115c5565b91505092915050565b600061161282610d96565b915061161d83610d96565b925082820390508181111561163557611634611488565b5b92915050565b600061164682610d96565b915061165183610d96565b925082820190508082111561166957611668611488565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116a982610d96565b91506116b483610d96565b9250826116c4576116c361166f565b5b828206905092915050565b600081905092915050565b50565b60006116ea6000836116cf565b91506116f5826116da565b600082019050919050565b600061170b826116dd565b915081905091905056fea2646970667358221220ba3cdeb59656e7f56d0af39a39e0a7896145d62d4cbfb9824225c7ed6c33d3b864736f6c63430008130033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override deploy(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
