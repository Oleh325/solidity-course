{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\nerror FundMe__CallFailed();\nerror FundMe__NotEnoughSent();\n\n/**\n * @title FundMe\n * @author Oleh325\n * @notice This contract is a demonstration of a sample crowdfunding contract.\n * @dev This implements price feeds as our library.\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 constant public MINIMUM_USD = 5 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address private immutable i_owner;\n    AggregatorV3Interface private immutable i_priceFeed;\n\n    modifier onlyOwner {\n        if(msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function is used to fund the contract. It will revert if the amount sent is less than the minimum, which is 5 USD.\n     */\n    function fund() public payable {\n        if(msg.value.getConversionRate(i_priceFeed) <= MINIMUM_USD) revert FundMe__NotEnoughSent();\n        if(s_addressToAmountFunded[msg.sender] == 0) {\n            s_funders.push(msg.sender);\n            s_addressToAmountFunded[msg.sender] = msg.value;\n        }\n        else {\n            s_addressToAmountFunded[msg.sender] += msg.value;\n        }\n    }\n\n    /**\n     * @notice This function is used to withdraw all the funds from the contract. It will revert if the caller is not the owner.\n     */\n    function withdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        if(!callSuccess) revert FundMe__CallFailed();\n    }\n\n    function getOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n\n    function getFundersAmountFunded(address funder) public view returns(uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return i_priceFeed;\n    }\n}"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(uint256 amountETH, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 priceETH = getPrice(priceFeed);\n        uint256 amountETHinUSD = (priceETH * amountETH) / 1e18;\n        return amountETHinUSD;\n    }\n\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
